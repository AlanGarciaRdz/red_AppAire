function [Y,Xf,Af] = SOXLomaDorada2(X,~,~)
%SOXLOMADORADA2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-May-2016 14:29:31.
% 
% [Y] = SOXLomaDorada2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 11xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1;1;0;0;0;0;0;0;0;0;0];
x1_step1_gain = [0.0384615384615385;0.0869565217391304;11.9760479041916;17.6991150442478;0.00572573718866304;0.0175284837861525;62.5;0.0546448087431694;0.125;90.9090909090909;29.8507462686567];
x1_step1_ymin = -1;

% Layer 1
b1 = [-1.571536735826921;-1.9699975279236495;-2.6519807721668291;-1.5802630605926133;1.264417910297658;-0.0061302401049379293;-1.7945807824250439;2.599105300138854;1.985132618365324;1.5753527819426087;-1.4620581207657797;-5.2575255551475895];
IW1_1 = [6.3991761015768347 0.40557153196953666 0.10234044503655107 2.8915946207790868 0.30483633414964995 1.2944280267818302 -0.28748017415042032 1.8191768348307225 0.11267207856700392 1.238473024931898 -0.082354298945490567;0.25426276446505547 0.36007739781344084 0.023552676213322309 1.1944161302989564 0.61551576120169416 0.51697459266937018 -0.14197371815468618 -0.50377102568128407 0.37633634301799307 0.020183889252397762 0.83099848799186438;4.2467666882144064 0.68725223391892609 2.8876194472499073 2.6258398527347104 -0.44874204973610654 0.69624035403032558 0.17191320919278 -2.1603470569793681 0.27926866274843781 -5.1231182131069515 -0.38250163022060735;2.3784403566221082 1.598133577088706 0.95353491532446644 2.0519485458374005 0.67088671513590137 1.0527733593706663 0.39757832773072699 1.5682653621383336 -0.60332305191252333 0.028809068044295685 -0.83549974219065826;-1.2537385369856759 0.3586872665095448 0.18290617402803189 0.052703453745925596 0.048864826156587965 -0.57547770495933359 0.22579808282660285 -1.7076742296218264 0.17359441927416691 0.80867309821813382 -0.44086503783185749;-0.50577491643521355 -0.2764924738380603 0.15429438682184238 -0.021345167267593342 -0.13265253842394692 0.41652294719660421 1.3520130377673687 -0.090221735412209902 0.69576637809450725 0.11613200591817587 0.49721514122852423;0.50272700177024987 -0.34353441462833867 -1.9466555027694095 -1.3794074740248516 1.9110920313542725 -2.9133958115124852 -2.7402607436383359 -1.6367181415414445 0.74628144554685782 -0.35518682495275516 -0.29997716325910279;2.4206392403197619 -0.70132138950910816 1.9824796046362354 0.62434460630767352 0.063514195493509423 0.8976172384713349 2.4684085724968137 1.9955030858408866 -0.45442488582494733 -1.2159897527338999 -0.21956611454281738;-1.7512169678165255 -0.099949572896366801 0.85199000807826497 0.85095708839876449 -0.79399807228875952 1.2763868024500464 1.3015279829829622 1.2036535153264112 -0.21361721197181494 -0.29752325627746906 0.31916663916409355;1.1697158364140094 -0.078020005111203411 -0.23620026555852938 -0.25626833257182624 -0.38945254406243496 0.36346711136346671 0.79047379111332083 0.6607537389194299 0.10977395755496762 0.42979174394084763 0.012060735687136757;-0.71992609095775895 -0.12150262272738926 0.058019210535105135 0.66327159637007826 -0.95159636454276175 0.37773795040339891 -0.051412978364902079 1.1165475038034038 0.12014618103545073 1.7587534690097393 -0.32267864031785204;2.2534133064944268 0.98971777753762291 0.78705733087414287 1.1881196344321947 -1.5427896737811102 1.1881947644364497 1.4311951021404605 -1.2082764595629709 -0.064257870164037834 -4.7844231811900828 -1.4743227583054292];

% Layer 2
b2 = [-1.8648426267993234;-1.5553902886730573;-1.9189074053524311;-0.54071843390864138;-3.2024840270196901;0.48883673924602711;0.19449160000798288;-0.97236511056057984;0.098623873882396032;1.1050688023718007;2.0285139959413354;-1.9020528737134517];
LW2_1 = [0.25681432836511309 0.06348311241591359 0.42939179415089351 0.28340557895832219 0.51744396358383771 0.71506982998022262 -0.60114319689862783 -0.1108833861799752 -0.0012533210672885276 -0.89878625669835943 0.94250103628500415 -0.32469285014898852;0.44620398373048376 0.17396880285881694 -0.81204817226700521 -0.42256893042629518 -0.40318247095095794 0.11684131791006466 -0.78949553612460888 0.51587319025274547 1.0201517441971044 1.4722911098422244 0.89094699805912458 -0.7167526055375838;1.6484679458149503 1.1489454423523786 0.5326238886198621 -0.072303198922955184 -0.14485076054716456 1.4896263409305488 -0.21588994326405986 -1.985460751895056 1.5898783524259417 -2.3753066485164287 -0.086666184527344536 -1.8538323984681435;0.42525078353930373 -0.53984768973184483 -0.43596298676213552 -0.28542897157612723 -0.18483066371277623 -0.35312240948582907 -0.58186672900403935 0.096197891954983503 -1.1268577370803947 -0.39766630260686803 -0.51114764762077114 0.556309897903012;3.7923890269275216 2.9894789200871532 -6.6923288716436486 -1.584417862926311 -0.29782199934613252 2.9809376687485529 4.3961467016058489 4.4241771258122942 4.2121170196959499 -0.34066237487262435 2.5554900047631386 6.6820676003861514;-0.40669921646546575 0.099549679584968603 0.6407335390618365 -0.89221152947201854 -0.32651009876284254 -0.41990900614931925 -0.54053710461536741 -0.61158929569831166 1.4559090215810617 0.91759336212555898 -0.51198232032687796 0.57302527994853747;-0.55622064060850152 -0.85023027965268438 -0.73329136925778449 0.34786496121824739 -0.6495030836674498 -0.23777246992690143 -0.52223837242528659 -0.10008827149917293 0.5563954847157857 0.0046016077435979547 0.39788476899137415 -0.26587314809722706;-1.1662687802206591 0.13573547306600547 -0.96742008796375278 0.44755000893630975 -0.41649034934345563 -0.095871827561236689 -0.39477408216620163 0.66577496416133453 -0.66965228401909771 0.55001590189216221 -0.21682408019906146 0.22944871760743343;-0.2240824273134239 -0.43937631597693039 1.3270825959479804 0.25312083341464475 0.35803783869314815 -1.4794868592827775 0.18175283113569368 -0.53405085748451975 0.45969303541024148 0.80625423816282138 0.31913045877376939 -1.0078580682821603;0.045852769898479709 -0.072067030809098931 -0.24622996686758816 -0.28769376273815911 0.35287199682402726 -0.025351888415938183 0.55368653780791766 0.83128408762403372 -0.12970874787212489 0.52124184121396699 -0.38443224767737039 -0.5948935716736411;0.2801125975404325 -1.6204272378180544 -0.22086085092178828 -0.088319467508350458 -0.43145426530108222 0.91962227899091964 -0.43826131306202476 -0.26242236571882416 -0.28104621047970924 -1.0638162833154936 0.36182090163803499 0.1600614704596971;-0.9590161125186295 -0.51077544569496702 -0.43995568288553705 0.44801820968088113 -0.34322029541000798 0.54888205294210202 0.1649334262255657 0.58771980573115934 0.74878445226714652 -1.2503752527374845 0.96013056216084502 -0.69115883218467555];

% Layer 3
b3 = 1.9771464421791363;
LW3_2 = [-1.6121490377701138 0.068846302560373232 1.1788814104454715 0.28841393884497263 3.9156498400044422 0.077913372320039143 0.20879583912577798 -0.1494414739079378 0.50102710420597174 0.70082133736493513 -0.79493985133999678 0.13908924157578062];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 35.0877192982456;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
