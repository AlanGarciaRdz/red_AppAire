function [Y,Xf,Af] = PM10Vallarta20(X,~,~)
%PM10VALLARTA20 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-May-2016 14:20:48.
% 
% [Y] = PM10Vallarta20(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1;1;0;0;0;0;0;0];
x1_step1_gain = [0.0384615384615385;0.0869565217391304;5.12820512820513;0.00782778864970646;24.390243902439;0.02710027100271;0.00630517023959647;0.141843971631206];
x1_step1_ymin = -1;

% Layer 1
b1 = [3.6263069333173585;-3.791436691289662;0.88186823244232615;-2.0186196585013541;-3.1047989044055879;0.45618101137028133;-0.35574339370226754;-1.9758528032071241;-2.3478936309511105;-0.6126754680408657];
IW1_1 = [-1.3285078790312981 1.792518267311273 -1.1425917190034882 -1.8592030972663702 -1.2073638522535322 -0.45210577551522663 0.92862632684137492 1.8131443165558783;3.592437295107382 0.38209393860247026 0.1734528593696163 -1.614870186029945 1.0131068837720705 0.79008417925506669 -0.89993662989100753 0.074623293550968584;0.014327719135388897 -3.2565401253860671 0.077109627094327449 -0.39709438726516394 1.5632473138292053 -4.0584658833345681 -0.42593819490832324 -0.073564666586434707;1.2304700114428686 -0.10561072798180082 -1.7034940519948751 -0.065417849711925186 1.8987588841687304 2.4448335000643899 -1.6361934463889656 -0.76142440728768501;3.0153730743318459 -0.67008718028569947 -0.058229584074211679 0.49109693877751903 1.1685823157992543 -2.4365226460310025 0.13382386986212497 0.52112689912057397;-2.9903919625724815 -1.458854100615262 0.29197804066771876 -1.4958412858522656 -0.31981934616466001 -1.2659049401735254 0.12193202309524523 -0.56342558832513945;-0.79638186768029839 -0.37229743939405718 0.53230007565093884 0.14415437396768627 -1.6884924203036096 1.5288086480989627 0.24982274921572553 0.12261949727836345;-1.9302613955762171 -0.043063261158684363 0.96893806695833828 0.051018290904373403 -2.684459985989966 0.69452313422530343 0.28191056452564267 -0.15120737350702518;-0.62704825268013908 -0.84115037256469682 0.42333060946033496 0.74702086329639039 -1.949403233631072 2.457274944968677 0.61071842032112522 -1.8413165608792865;-0.025641776942879738 0.04621858874009567 -0.91416146696417666 0.36644156916025616 2.0512394589278751 -0.34559158213724495 -1.2748840942350339 -0.68552000317023487];

% Layer 2
b2 = [0.68956880662744036;-1.4409858301232714;-1.1004157972109774;-1.1437194269714741;0.58532139807687489;-1.8246464303192769;-0.43779603180608717;0.12225965068893763;-1.4571568787393498;-2.3191874098323999];
LW2_1 = [0.18420927281091143 0.5416552081317263 -1.4866449562206443 -0.45014970705133828 1.109833845195717 4.1330398698434454 0.15850909523101425 -1.5074453149348801 2.1387522149357894 1.9284272275868435;0.30744134286338992 0.082848929068029264 -0.17249208773776722 -1.6387260383487756 -2.6361952733018632 -1.4959430846765092 0.34186276289236939 -2.9489747186693691 0.19563825423867442 -0.51759777365997395;-0.10882481510226955 0.13059000823928818 0.11405207826086934 0.26523430672617426 1.7493994463091875 0.51283596234188533 -0.19632364961241539 0.31321520032166594 -0.099218499392345644 -2.4583886576655236;-0.49755492267484769 0.54463569999842654 -0.042008438123168013 0.95703851861435518 1.6812313183464909 2.6704818311375953 0.52285649950062996 -5.1901371575501871 -0.2387797067327353 -2.350338550788079;0.74711394008476706 -0.99876993336067543 0.21949633483519226 1.7511895958284653 2.0879930943133433 0.1958344070995045 -0.5906606961468075 2.4996142524290139 -0.064841345204546263 0.41097600830741943;-1.1460490614701151 -0.083881326996847347 -1.7889079649297674 0.80105303256166505 0.39132398267392693 0.94287774479757169 0.32723179013384623 1.1886153238003634 -0.16639514687874088 -0.49765062405124505;-2.9396873871771172 1.0786461868722181 -0.23771101369384534 1.049320111754789 -1.1082291355620892 1.9836563606319206 -0.68721280466658852 -0.77938800657705776 -0.59423299198356583 -0.53621046255962634;0.081976077172119993 -0.71366949662351065 0.34242408259498497 2.75502423305764 2.1867186823295546 0.45795853249254526 -1.5704188221998621 -0.015795618807921685 -0.30286802851492889 -2.6214660475547134;-0.26977838207899957 0.87810852979742959 0.10983443595555585 -0.96288420414706499 -3.0185420821049842 -1.4452512401259601 2.2533021641579785 -1.5816630409163426 -1.5820174480362996 0.68011931551113991;-1.2520309592265004 -0.99587699939394392 0.1887860463226283 0.83115174729194163 1.0751982913810627 0.22966288230998222 1.3415321491629553 0.12130499285537774 -1.2979592305474337 -3.2815927684202744];

% Layer 3
b3 = -1.7090281680153692;
LW3_2 = [0.10175669483811164 -1.4804836447353333 -0.66276367826093108 -0.12617657340705379 -1.8495250730627155 -0.29753763384407428 -0.48287622974709055 0.34245817798588696 -0.2271503843486703 0.27968046023144089];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.00666000666000666;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
