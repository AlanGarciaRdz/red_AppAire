function [Y,Xf,Af] = PM10Vallarta2(X,~,~)
%PM10VALLARTA2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-May-2016 14:20:44.
% 
% [Y] = PM10Vallarta2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1;1;0;0;0;0;0;0];
x1_step1_gain = [0.0384615384615385;0.0869565217391304;5.12820512820513;0.00782778864970646;24.390243902439;0.02710027100271;0.00630517023959647;0.141843971631206];
x1_step1_ymin = -1;

% Layer 1
b1 = [2.0303505482984461;-0.14642489843989831;2.0627078572263731;-2.2103272472695696;-1.8978766582097593;-1.010615067531889;1.2973349944105528;-0.69304100336068652;2.3818356832811607;6.1212207208387763];
IW1_1 = [-2.0382934843991278 -0.10138469639115427 0.076622102589273877 -0.13827423606033537 0.24398854580358975 -0.081403481138340367 0.11878271621890758 0.090256572315034103;0.54008391123838895 0.22438500533268954 -0.70222012767834341 -0.066776417567070798 1.8654131556977411 -3.8209106531092716 0.38488003774737845 0.40717887119878449;-2.0974434148801588 1.1078914816369918 0.084819748201418077 -0.10659339079628435 -0.86277458148630704 -0.28638763925280375 0.1417908889526111 0.25360829048931066;1.4966437079229971 -2.674346694413607 -0.3753983150077933 -0.093768758254333742 0.045056494248246121 -1.4066312776329233 -0.024432207645680618 0.06664617445298826;0.54958710702061486 1.1235034600892295 0.40418746807940958 0.0014651441280067942 -1.8459003153882618 0.97397299216262356 -0.019077987158509817 -0.16373258005270594;1.4499880064713551 0.67996019350786585 -1.6905485628102725 -0.044328765238707116 1.9787019985020287 1.6344963044010081 0.75869195818463409 0.55600605386694257;-0.13368098774541626 -0.34110442720961237 -0.053779591831952772 2.4594994812223163 0.055803240587459696 -2.2286084235243706 0.56369864522591118 -0.037787867165934436;-1.7528737872650895 0.18846586052619024 -0.028196477237682791 -0.054137698571530515 0.2125326940433884 0.02991342688525447 0.15481013616392153 0.084053372369005827;3.1167016251074937 -0.05814566178737194 -0.095787880627041647 0.083553748888947829 0.2698996353709005 1.5411357576625797 -0.17089443917059277 -0.26048662330476541;-0.87254999727737526 -0.2862920504594525 -0.75725058222201314 0.97030423664107224 0.9511962896920596 -0.30561096932663917 3.8964694986260264 0.0049421518176500211];

% Layer 2
b2 = [-3.167191988668697;0.62064923993108168;-1.0830156881890596;2.6657972145708109;0.45951341330003154;-0.5683299929625778;0.46304853572041765;2.346570355935869;-1.1344591461232283;4.9225471447419844];
LW2_1 = [-0.50049837348558168 -0.57431242565094487 -4.6866962043594773 -6.5388236358687175 0.54708458656734593 0.3491754062745237 0.24136245465435391 -0.90585676600393383 -0.88595068022089696 0.97592745233913236;-0.41850009005855437 -1.1477281492628488 1.20670677352989 1.0918608129033252 -1.0142883588265477 0.47358843697937208 0.60902135020771497 2.1132028755672954 0.082172087838257787 -0.58934771421786469;0.61524258626265071 -0.75727926054241923 0.28501906311089975 0.75841736196864185 1.1466292179669866 -0.0082824672202734748 0.54347571214808643 -0.025845808356612095 -0.4207464981265383 1.7159662608899229;0.13072273697326056 1.0445325372189518 -0.33877723371790419 0.012307021477312781 -0.83494613237017212 0.41349745020296808 -1.1936295891111952 4.0260947853226048 2.619585640930254 -2.3645090588918225;-5.0232837947507365 1.0538853515781177 -1.8595438118215686 -0.88828050029522188 -0.0019350684791985609 0.097032390717566738 0.69463450969893403 -3.0936222566177318 -4.6617717143405928 0.014458771768502091;-0.65368118319720314 -0.069225324452070108 2.3553030336944945 -1.3777204591288319 -3.4768211290837616 -0.33115385661256369 0.029457780993512653 -0.50128339527503096 1.2403477452296467 -0.51003973967805327;0.29134589697743807 -1.0658257312893613 0.63655278895468947 1.2554094729605061 -1.0486549168086019 -0.01599378687807199 0.5934014765655764 2.7272367277122163 0.4274905801443063 -1.0451505331164324;3.7648603517264787 -0.84619216975260203 1.4977255282529593 0.95068124290847222 0.37232794104785594 0.11840066305246716 -0.52771066663958943 0.24756506084077298 -0.49788954298550248 0.25899941611277305;2.6588002399484649 0.054802824344061654 -2.3264929578610394 0.44558757180620123 0.77598808175835388 0.02238158588173688 -0.15179085392787398 1.2194371075129167 0.62858487720189726 0.71904097601327244;0.72986015463261444 0.54999056802763524 -0.81983432106061471 0.98385111984644691 6.1905617538671898 0.080682492100719413 -2.8290176464936945 1.2905429044358161 -0.023297037638903759 5.3015750038279252];

% Layer 3
b3 = 2.034272818635821;
LW3_2 = [1.0159781037538804 1.3323063419153109 -0.35827877724361729 -0.205421464411462 -1.8510523171856694 2.5858206861800399 -1.2112465199083027 -4.5226714946361906 0.71206718614184572 -1.2667702629893309];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.00666000666000666;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
