function [Y,Xf,Af] = NOXLomaDorada24(X,~,~)
%NOXLOMADORADA24 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-May-2016 14:08:26.
% 
% [Y] = NOXLomaDorada24(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1;1;0;0;0;0;0];
x1_step1_gain = [0.0384615384615385;0.0869565217391304;4.5045045045045;14.7058823529412;0.00280033604032484;0.0179856115107914;0.0558659217877095];
x1_step1_ymin = -1;

% Layer 1
b1 = [-1.3131094491741986;2.9645068656249243;-5.3937895579195496;2.1261265638712774;1.1840019310255374;0.40537796389816588;-1.4035759337700739;-0.9429155332520579;-2.1738128883413115;-0.52892218576123462;-3.5409714931241156;-1.5544361223959491;-3.4047945605267818];
IW1_1 = [1.3610706259320835 0.42229481351277864 -1.1650808781471735 1.6995772529757343 0.1680697952526703 -0.21171009199157204 -1.0379613152371514;-2.1279963517736347 -0.67663306867448125 -0.53550975444867066 1.0549292974636135 -0.49943845453455082 -0.27609544008108788 1.5982783330849448;4.9921728413966511 -0.12105105111412581 1.1308583801655885 -1.1154455071266547 -0.1647707681529734 0.12816341716940768 0.17906580937740049;4.1562753640575449 1.3169885850332326 -1.1137237307880747 -0.035650555534240555 -0.044670042185975624 0.82861934070056065 0.5513637905775588;-0.62081953205178853 -0.69959786107644117 -0.0024583618067476557 -1.1401404208008876 -0.20945842079951246 0.67166713520572996 -0.43485521265699789;-2.7536944188623638 -0.23153175299799544 -1.8545549216583865 -0.54842203592219574 -1.1780824236839564 0.64355132900830958 0.96470233859641807;2.0337102760833532 -1.7005776768724283 -0.062401276520066537 -1.9989152597830042 0.1051493836564638 0.54009804091714508 -0.20869862041695153;0.051953874769428927 1.6694375614566646 0.60318794684936161 -0.11643334828875351 0.9343813382620747 -0.67163700697086925 -2.1659540479391275;-0.33817661519625331 -4.0660182037350401 -0.16989770951392602 -0.98002688522836801 0.086418200416789132 -0.11891246554168022 0.02506510877200439;1.7575695502558126 0.73194463457444692 0.091310740757279227 0.27863519202867709 0.069414935953911502 0.15222627837088315 -1.0739724877910028;-1.0724225944956287 1.0172971184855215 -1.5588550689454193 -1.8348324256293316 -0.0023548170035860815 -1.6288281195448999 -3.0765605966674583;-0.2206300923067169 -1.4319378924100292 0.39953707845425579 -0.22560543063854699 0.20681259096894863 0.2906452936531792 -0.19871992688835904;-3.1061738685467946 3.6202839777601543 0.92811235859774566 -3.2040049338826777 0.10804510465781908 -0.51019222405309805 -0.077861937113258353];

% Layer 2
b2 = [0.88268743014204099;-1.6762068222648436;-2.9428385401081121;-4.5123708065078363;2.2096518731274593;0.95554873638447191;1.3256641498855208;-0.99411533889331472;0.69775419877331346;1.56493145386368;-2.1003670608061014;3.6004705573655968;0.12794077602968762];
LW2_1 = [1.6294943004458748 1.4383834881454265 0.23499485585042035 0.16989925789670302 2.8588540375262155 1.5316727690999861 -0.98757431151150787 2.1098907769761199 0.80534581193456789 -0.0044585359011575301 -0.90180911429559019 0.62823147606192042 0.073754823194010222;1.3769644894161337 1.5634813033450636 0.27065782700107976 1.1008483822672466 0.49948629417718493 1.7224453417523511 1.3847934443485452 0.16245426220941434 0.60505109639485055 -0.88398363617235243 -0.9966138542437788 -0.43597653189836461 0.94701371535282841;0.006698078892911883 -1.3688357930822639 -1.4652659301615631 -0.44289275189746391 0.31032991713671926 0.67814878792160649 -0.53355422315156464 0.51471985823563382 -0.68165233887551613 -0.061418687696682676 -0.99482270862798217 -0.10109240528236405 -0.22344781539542571;-0.87014073480882193 2.8765727318048993 -0.32183627597142472 -0.14853673085077082 -1.714220132718951 -0.11957102774629325 0.13708252445429117 -0.14610924826827293 1.1673182492693035 -0.4565709115439523 -0.35858974249603309 -0.47925014807295874 -0.075401353327729043;0.41875821467072266 1.2838243311160003 0.87248106369809908 0.75079038853455582 0.056027818919474004 1.3116300199908544 0.64015351600998482 -0.027704233058413345 1.2503335380361462 -0.1997249428492909 -0.027217959843591114 2.268334919424861 -0.049585747070777925;2.1476259009342926 0.55875456198656581 0.37606858316654462 0.9114307208681145 0.99223291467492714 0.8764528393983978 0.35843824119323325 0.23406033087087591 0.7898657235375045 -0.95879715550127997 -0.00094249478771818267 0.23289307497763545 -0.12028789078194552;-0.11690585861773496 0.29046829250242939 1.1092904123523104 -0.70565570009469536 -0.049718862128685593 -1.0607258200679077 0.28121851394584696 0.050561148549578994 0.85052112388932255 -0.88375450576320869 -0.28208911843310647 -0.24107087850820041 -0.79670728483666564;-0.086192467855430582 -0.48320090212820932 1.5105527744179197 0.54394684979393804 0.82283607460556085 0.6471123420971383 0.42237807545228212 -1.1363117501850704 1.4782522965186968 0.3213680342886216 0.43545309366286672 0.40039368384320417 0.83779004816889846;-0.57383365545137766 0.24729692854198959 1.2798869586672241 -0.17258163919643693 -0.24430597339748669 -0.65186118455397435 -0.18849478389799484 0.16531577850661838 0.070698043199017652 0.46964968237033333 -1.0690908712712188 0.182586667321428 0.32098729483341931;0.21245206409510697 1.2004381548281235 0.86482635920039708 0.35615153442308095 -0.014511570949109924 -0.57449915126592033 0.13789798076260959 -0.44899403253796433 -0.32465272022922226 0.55902412723954675 0.3816252038803396 0.49162585746719006 0.52306725305362323;-2.4917620764393509 2.6288933709108115 -0.37238429456444239 -0.57056599958156728 -1.0792382023666633 -2.2486015740615657 -1.0738161208478105 -0.08298441754171107 -0.41872198542349115 0.20945830418325279 -0.69453708913033119 0.3696159807721392 -0.12202965931251324;1.4351141020505038 0.25246201385713374 -0.10365247926113653 1.2765256014753401 0.8344526751899829 -2.8642137952947309 1.0940996549128481 0.75054522677681723 0.39056566518325414 -1.4988554603010824 -0.60390363303846173 -0.23456268656950849 0.5249738958018112;1.2511547452554259 1.1455074152456342 -0.23352452793946299 0.21760101556183084 1.0932817567363393 -0.66396063579324482 0.46619899485546779 1.0016332281803206 -0.75898514729572653 -1.7837352671171558 -0.22305728824412802 -0.87951988102205858 0.48110445616660619];

% Layer 3
b3 = -1.8959235051799774;
LW3_2 = [2.0951379777511869 -1.1503680385751767 1.6777282668541631 2.105799253412945 1.0573071638952809 -1.3122575106186283 1.1099608765477904 -1.2253237761253821 -0.95238111609502119 3.1921886253744014 0.32326249058190681 1.5546817387604293 -1.1425684339669253];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 4.04040404040404;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
