function [Y,Xf,Af] = COLomaDorada16(X,~,~)
%COLOMADORADA16 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-May-2016 13:56:39.
% 
% [Y] = COLomaDorada16(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1;1;0;0;0;0;0];
x1_step1_gain = [0.0384615384615385;0.0869565217391304;0.290275761973875;17.6991150442478;0.00572573718866304;0.0175284837861525;0.0546448087431694];
x1_step1_ymin = -1;

% Layer 1
b1 = [-4.7903646894234519;-2.4628030520904156;0.13569675414345178;0.80530049714579466;-0.56382934452630207;2.0646869067397726;-0.31202280724206738;-0.95549271709829198;1.780797678970554;6.6156176539183065;-1.7983505257533345;1.3522830159641679;2.2178764906603226];
IW1_1 = [4.2146992664847094 -0.34789581448578261 1.1037887821407688 -0.72750461787810139 -1.9499021515263988 0.35306665212294241 0.55108042788736045;1.0767475726321927 -1.0819130366266996 0.01983654576066634 0.29138598500876101 -0.62646989985001145 -0.6579117661177708 -0.99852616825182361;-1.2950468368742549 -0.82100391543137308 -0.037654169071867444 0.11787009802893517 -0.030280529100454964 0.26167863567441291 -0.6215550774964782;0.19766319573160979 -0.13113733871152833 1.4932885183564044 1.9092335066679627 -0.29069912216658828 0.51248328918515584 2.68874558346204;-0.75168833568032611 4.4749609436840521 0.67397397307537898 -0.29772472251676024 -1.8199972805657958 2.6346408687488778 -2.3209162080535615;-0.12180072882631968 -3.5232367635097117 0.29972528408591448 0.24933004978475612 0.018878613737021967 0.18867972212805964 -0.0086476076221626477;-0.094600715375336972 0.541207850934878 -0.7306208330362034 -0.70356708433367254 0.58893379030447568 -0.51418125002718751 0.14531562930390704;0.95107927971050243 0.81175140453455663 1.4117861436844135 1.14599514115142 -0.97843810844313606 -2.1598933862608756 0.47599660552090395;0.22283774246458579 3.338300236639848 -1.5517233073262007 -1.0427942183126362 1.5266858499911837 -1.0693167727701449 -0.15846432865168747;8.5041021300342976 -0.21991620541396661 0.93240495298637016 1.6319969533376344 -0.87384445531485921 0.81392136801288428 1.389986659918186;0.62656829520235036 -1.1926067821825213 -0.00023212121283789494 0.52338346707558991 -0.014399458894381573 -0.89069863444806696 -0.77499782548944918;1.748351306715261 0.69382940978328356 0.38766472021437132 -0.88699158977593062 -0.19752485685374799 0.12984461146320408 0.75755284075312068;0.71015462134729446 1.6289194825232625 -0.2600121463350476 -1.1134984310792426 -0.2605201433495074 1.3032579530919086 1.2375013457467854];

% Layer 2
b2 = [-1.6899805145479361;1.4750574394067884;2.8449950011623986;0.6160659017720066;0.45219414869783842;0.91401563033964217;1.294882289057639;0.82266140276802557;-0.099533602267914661;0.69903618185187177;-1.2742770380855053;-1.0611289532667338;1.5117429717539075];
LW2_1 = [0.30236795371933239 0.95614324256094274 -0.3310979055174002 0.79705221672307836 0.99572325386395455 1.8977099763161083 1.1114095471625818 -0.90605799605962167 0.19818838789274296 -0.27764843782799969 -1.2536769973420052 -1.1423676009590238 -0.38150985625104189;-0.22592652709742175 -0.18095658980759111 -0.53716126329392366 -0.098908182248941087 -0.07030284845058983 -0.50697896839602941 -1.5339256423785381 -0.37448938915999974 0.54728122336837726 -0.10707851357485587 -0.19508203432850618 -1.109635933083198 0.2353291190017959;0.30010909310453571 0.88876313824158715 1.178692332810211 1.4813741945602006 -0.78972736078707173 3.5801080266049876 2.9067413671177138 -0.13945689414653306 1.3059742847626408 -3.1541086351713714 1.424115765095898 -2.1323700472907743 1.7252308815296311;0.069206860985703916 1.109380321981428 -0.20213930026519722 0.26519308803212815 -0.67723819534888929 -2.3982835934610169 -2.791252231356538 -0.79434163978858829 1.7803359749685812 -0.35702788934906421 -0.92989498502624701 -0.41713186949305009 -0.065009382820308353;0.1840721137193847 1.986818136789301 1.0312709853098923 0.75698420981705905 -0.67020445419654306 0.39040729814494424 1.7507511064327024 0.7252599235097581 -0.65423589157570394 0.73396831630302795 0.68407866465512102 0.61618712623468563 1.2894404275657945;0.669781578146315 -0.037302707374235522 0.3983274605712766 -0.37801159729147782 0.00080044709146611173 1.1767618580768686 0.53334854692982514 0.53097663421057828 -0.67208473466630414 0.32660195230074196 0.99253499635877318 -0.001259855043659653 0.46353743182053803;-2.7588442296738984 -0.15776105912050944 -1.1198193695521517 0.78131593076083261 0.25081859094559583 0.0010950360597128117 -0.47450427962144726 0.11524505452197983 -0.67614072047826912 -0.60969650885275728 -0.13752718157287896 0.72092845823906648 0.42347100397406001;-0.05408279393378132 0.110809013410872 -1.1251178511285167 -0.29417562109028766 -0.037561230473981119 0.43994931314021724 -1.0077048580420569 -0.39848295359201025 0.12537801668501655 -0.7222697136685402 -0.10218143411149488 -0.86203856744354301 1.0544324730629144;-0.23972703572849358 0.411773242632331 -0.10157613519961224 -0.24631976899242419 0.62997579411639493 2.2774281270900909 2.9120812276838977 0.74026558233145956 -1.9631129364410087 0.20110529191817345 -0.68933038772546495 0.18481237313583179 -0.16735255416065767;-0.33917373791792316 0.038793247116174344 -1.4179683777309471 -0.17578461008033863 -0.29012272778283982 0.10161172197918342 -2.0319348315735515 -0.74257407650454343 0.56066419974768089 -0.71394480154653661 0.044095147684558217 -1.7238016531383038 1.5107250353433792;-0.87401936060832863 -1.5968088019490796 -0.20873528326647633 0.28949268725576771 -0.14470291706407942 -1.8777995437704702 -0.75987418916278682 -0.50219593264735418 0.8396684649789351 -0.1020630895934134 1.7471640305088112 0.2579507625467774 0.88231156124644794;-0.21311840225238052 0.11575313968381519 0.06061128400548732 0.65093349925248445 -0.52512139196853858 0.28573266225818617 -0.22914947245692904 -0.14886852047291554 0.16035836203306661 -1.0764628097362803 1.6829950685056616 0.41372177416038869 0.33743692057964936;0.25680337512403334 1.1005579187833512 1.1541862539304235 5.7785574037552347 0.016457756302462968 -0.08427036620113168 -0.01975583994240529 -0.076076588001911249 0.4226694391055355 -6.1246492117817715 1.3120325082403492 0.6368975791381748 -0.26927304296495391];

% Layer 3
b3 = 0.67203200909416783;
LW3_2 = [0.32249461235511928 -2.3084545428944248 -0.12365754344555999 2.0112754466157203 -0.31507609190091446 2.1387791514032179 0.30572291745925817 -1.7379355504096992 1.7128470509712124 1.6796910672170169 1.6784365763950453 -0.72313856576750446 0.23855647937883293];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.448430493273543;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
